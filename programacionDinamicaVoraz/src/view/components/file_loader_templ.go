// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func FileUploader() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"file_upload\" data-on-load=\"$$get\" data-store=\"{&#34;files&#34;: [], &#34;filesMimes&#34;: [], &#34;filesNames&#34;: []}\"><script>\r\n    let selectedFiles = [];\r\n    let socket;\r\n\r\n    function startTask() {\r\n      // Establish WebSocket connection\r\n      if (!socket) {\r\n        socket = new WebSocket('ws://localhost:8080/ws');\r\n      }\r\n\r\n      socket.onmessage = function (event) {\r\n        console.log('Message from server ', event.data);\r\n        const resultContainer = document.getElementById(\"result-container\");\r\n        try {\r\n          if (event.data === \"Task completed!\") return;\r\n          const data = JSON.parse(event.data);\r\n          for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n              const p = document.createElement('p');\r\n              p.style.width = 'fit-content';\r\n              p.style.marginInline = 'auto';\r\n              p.textContent = `${key}: ${data[key]}`;\r\n              resultContainer.appendChild(p);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.log('Error parsing JSON:', error);\r\n        }\r\n      };\r\n\r\n      socket.onopen = function (event) {\r\n        console.log(\"WebSocket is open now.\");\r\n        // Send each file to the server\r\n        for (const file of selectedFiles) {\r\n          sendFile(file);\r\n        }\r\n      };\r\n\r\n      socket.onclose = function (event) {\r\n        console.log('Connection closed', event);\r\n      };\r\n\r\n      socket.onerror = function (error) {\r\n        console.log('Connection error ', error);\r\n      };\r\n    }\r\n\r\n    function handleFiles(event) {\r\n      const files = event.target.files;\r\n      selectedFiles = files;\r\n      // Loop through the selected files\r\n      const filesList = document.getElementById(\"uploaded-files-list\");\r\n      filesList.innerHTML = '';\r\n\r\n      for (const file of files) {\r\n        const li = document.createElement('li');\r\n        li.style.width = 'fit-content';\r\n        li.style.marginInline = 'auto';\r\n        li.textContent = `${file.name}`;\r\n        filesList.appendChild(li);\r\n      }\r\n    }\r\n\r\n    function sendFile(file) {\r\n      const reader = new FileReader();\r\n\r\n      // Read file as ArrayBuffer to send binary data over WebSocket\r\n      reader.onload = function (event) {\r\n        socket.send(file.name);\r\n        console.log(\"Enviando file name...\");\r\n        socket.send(event.target.result);  // Send the file data\r\n        console.log(`File ${file.name} sent`);\r\n      };\r\n\r\n      reader.onerror = function (error) {\r\n        console.error(`Error reading file: ${file.name}`, error);\r\n      };\r\n\r\n      // Read the file as ArrayBuffer\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  </script><div class=\"flex flex-col items-center justify-center my-8\"><label for=\"file-upload\" class=\"cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Buscar archivos</label> <input id=\"file-upload\" type=\"file\" data-model=\"files\" multiple class=\"hidden\" onchange=\"handleFiles(event)\"></div><ul id=\"uploaded-files-list\"></ul><div class=\"flex justify-center container mx-auto\"><button class=\"mx-auto rounded-full text-white my-4 bg-[#06b6d4] px-8 py-2\" onclick=\"startTask()\">Enviar</button></div><!-- Result container to display messages from the server --><div id=\"result-container\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
