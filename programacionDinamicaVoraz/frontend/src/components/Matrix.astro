---
interface MatrixProps {
  strategy: number[];
  title: string;
}

const props = Astro.props as MatrixProps;
const strategy = props.strategy;
const title = props.title;

function calculateMatrixDimensions(n: number) {
  const columns = Math.ceil(Math.sqrt(n));
  const rows = Math.ceil(n / columns);
  return { rows, columns };
}

const { rows, columns } = calculateMatrixDimensions(strategy.length);
---
<div class="flex flex-col gap-2 max-w-sm">

  <!-- Matriz -->
  <div class="matrix w-full" style={`--rows: ${rows}; --columns: ${columns};`}>
    {strategy.map((value, index) => (
      <div class={`cell  bg-opacity-60 ${value === 1 ? 'bg-[#5DDF6C] ' : 'bg-[#FF6B6B]'}`} key={index}></div>
    ))}
  </div>
    <!-- BotÃ³n de copiar estrategia alineado a la derecha -->
  <button class="text-[#CECECE] w-fit text-xs rounded" onclick={`copyStrategy(${JSON.stringify(strategy)})`}>
    ðŸ“‹ Copiar estrategia
  </button>
</div>

<style>
  .matrix {
    display: grid;
    gap: 2px;
    grid-template-rows: repeat(var(--rows), 1fr);
    grid-template-columns: repeat(var(--columns), 1fr);
    aspect-ratio: 1 / 0.8;
  }
</style>

<!-- Script para copiar la estrategia al portapapeles -->
<script is:inline>
  function copyStrategy(strategyArray) {
    // AÃ±adir corchetes al inicio y al final
    const strategyString = '[' + strategyArray.join(', ') + ']';
    navigator.clipboard.writeText(strategyString)
      .then(() => {
        alert('Estrategia copiada al portapapeles.');
      })
      .catch((err) => {
        console.error('Error al copiar la estrategia:', err);
      });
  }
</script>

